#!/usr/bin/env bash

## Copyright (c) 2024 by Adam Korab <adam.korab@sixpackets.com>
## All rights reserved.
##
## This code is maintained by
## Adam Korab 
## and is contributed to by 
## Adam Korab, Dan Gast, Tim Burke, and Swen Wulf
##
## Spiritual inspiration comes from and thanks for supporting work goes to:
## IRR Explorer	(DashCare BV [https://www.dashcare.nl] + Stichting NLNOG [https://www.nlnog.net])
##  [https://irrexplorer.nlnog.net]
##  [https://github.com/nlnog/irrexplorer]
## BGPQ4 (Alexandre Snarskii <snar@snar.spb.ru>)
##  [https://github.com/bgp/bgpq4]

# Usage function to display help message
usage() {
    echo " "
    echo "irr-toolbox:recurse-prefixes - get prefixes by as-set from IRR"
    echo " "
    echo "Recurse a given as-set object through member aut-nums and member as-sets which themselves contain."
    echo "aut-nums, until the end-of-recursion aut-num is reached. Query aut-num objects for originated prefixes."
    echo " "
    echo "Usage: $0 <as_set_name|aut-num> [-s|--source <irr_source> -3|--level3|--lumen] <as_set_name> --debug -h|--help]"
    echo " "
    echo "          <as_set_name|aut-num>        # The IRR object you wish to enumerate"
    echo "          -s|--source <irr_source>     # Name of IRR to query such as NTTCOM, RADB, ALTDB, LEVEL3"
    echo "                                         See https://irr.net/registry for full list of SOURCE options"
    echo "                                         Defaults to NTTCOM if not specified"
    echo "          -3|--level3|--lumen          # Also parse as-set for 'remarks: Level3 members:' and walk"
    echo "                                         recursion for Lumen filtergen, comparing to 'members:' recursion"
    echo "          --debug                      # Enable script debugging output"
    echo "          -h|--help                    # Print this help message and exit"
    echo " "
    exit 1
}

# If no arguments are provided, print usage and exit
if [ $# -eq 0 ]; then
    usage
fi

## defaults for input variables
SOURCE="NTTCOM"
AS_SET="$1"
LUMEN=0
DEBUG=0

# Parse the command line options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -s|--source) SOURCE="$2"; shift 2;;
        -3|--level3|--lumen) LUMEN=1; shift 1;;
        --debug) DEBUG=1; shift 1;;
        -h|--help) usage;;
        --) shift; break;;  # End of options
        -*) echo "Unknown option: $1"; usage;;
        *) AS_SET="$1"; shift;;  # Handle positional argument
    esac
done

# Ensure required options are set
if [[ -z "$AS_SET" ]]; then
    echo "Error: <as_set_name> is required!"
    usage
fi

# Initialize variables
## make sure we have standard system stuff and utilies for all necessary commands
### Get the bash version
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking bash version"
fi
bash_version_major="${BASH_VERSINFO[0]}"
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: bash_version_major: [$bash_version_major]"
fi
### Check if the version is less than 5
if (( bash_version_major < 5 )); then
	if [ "$DEBUG" = "1" ]; then
    		echo "DEBUG: bash version is < 5; check failed"
	fi
    echo "ERROR: bash v5 required" && exit 1
else
        if [ "$DEBUG" = "1" ]; then
                echo "DEBUG: bash version not < 5; check succeeded"
        fi
fi

GREP=$(command -v grep)
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking command -v grep"
fi
if [ -z "$GREP" ]; then
    echo "ERROR: no command found for grep. Please check your path" && exit 1
else
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: grep found: [$GREP]"
    fi
fi
AWK=$(command -v awk)
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking command -v awk"
fi
if [ -z "$AWK" ]; then
    echo "ERROR: no command found for awk. Please check your path" && exit 1
else
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: awk found: [$AWK]"
    fi
fi
TR=$(command -v tr)
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking command -v tr"
fi
if [ -z "$TR" ]; then
    echo "ERROR: no command found for tr. Please check your path" && exit 1
else
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: tr found: [$TR]"
    fi
fi
TAIL=$(command -v tail)
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking command -v tail"
fi
if [ -z "$TAIL" ]; then
    echo "ERROR: no command found for tail. Please check your path" && exit 1
else
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: tail found: [$TAIL]"
    fi
fi

BGPQ4=$(command -v bgpq4)
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking command -v bgpq4"
fi
if [ -z "$BGPQ4" ]; then
    echo "ERROR: no command found for bgpq4. Please check your path" && exit 1
else
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: bgpq4 found: [$BGPQ4]"
    fi
fi

if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: checking command -v whois"
fi
WHOIS=$(command -v whois)
if [ -z "$WHOIS" ]; then
    echo "ERROR: no command found for whois. Please check your path." && exit 1
else
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: whois found: [$WHOIS]"
    fi
fi
## Mac default /usr/bin/whois is insufficient
UNAME=$(uname)
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: UNAME: [$UNAME]"
fi
if [ "$UNAME" = "Darwin" ]; then
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: UNAME: UNAME [$UNAME] matches Darwin, setting WHOIS to /opt/homebrew/opt/whois/bin/whois"
    fi
    WHOIS="/opt/homebrew/opt/whois/bin/whois"
    if [ ! -f "$WHOIS" ]; then
	if [ "$DEBUG" = "1" ]; then
		echo "DEBUG: whois not found"
	fi
        echo "ERROR: please install whois by running 'brew install whois' and then retry" && usage
    else
	if [ "$DEBUG" = "1" ]; then
                echo "DEBUG: whois found: [$WHOIS]"
        fi
    fi
fi

if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: SOURCE: [$SOURCE]"
    echo "DEBUG: AS-SET: [$AS_SET]"
    echo "DEBUG: LUMEN: [$LUMEN]"
    echo "DEBUG: DEBUG: [$DEBUG]"
fi

## function get_member_autnums
get_member_autnums() { grep "^members:" | awk '{print $2}' | tr , '\n' | grep -v "AS-"; }

## function get_member_as_sets
get_member_as_sets() { grep "^members:" | awk '{print $2}' | tr , '\n' | grep "AS-"; }

## function get_l3_members
get_l3_members() { grep -E "^remarks:\s+Level3 members:" | sed -E 's/^remarks:[[:space:]]+Level3 members: //' | tr , '\n'; }

# Track the recursion stack for AS-SET chains
declare -a AS_SET_STACK

## function validate_as_set
validate_as_set() {
    local as_set="$1"
    if [ "$DEBUG" = "1" ]; then
	echo "DEBUG: executing validate_as_set() for as-set: [$as_set]"
    fi
    if [[ "$as_set" =~ ^(AS(([0-9]+):AS-.*)|^AS-.*|^AS[0-9]+)$ ]]; then
        if [ "$DEBUG" = "1" ]; then
            echo "DEBUG: validate_as_set() returns 0 for valid format of AS_SET or AUT-NUM: [$as_set]"
        fi
        return 0  # Valid AS_SET or AUT-NUM
    else
        if [ "$DEBUG" = "1" ]; then
            echo "DEBUG: valid_as_set() returns 1 for invalid AS_SET: [$as_set]"
        fi
        return 1  # Invalid AS_SET or AUT-NUM
    fi
}

# Validate AS_SET
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: Validating AS-SET or AUT-NUM"
fi
if ! validate_as_set "$AS_SET"; then
    echo "ERROR: Invalid AS-SET or AUT-NUM format" && usage
fi

# Recurse AS_SET
case "$SOURCE" in
    AFRINIC) IRR="whois.afrinic.net";;
    ALTDB) IRR="whois.altdb.net";;
    APNIC) IRR="whois.apnic.net";;
    ARIN) IRR="rr.arin.net";;
    BELL) IRR="whois.in.bell.ca";;
    BBOI) IRR="irr.bboi.net";;
    CANARIE) IRR="whois.canarie.ca";;
    IDNIC) IRR="irr.idnic.net";;
    JPIRR) IRR="jpirr.nic.ad.jp";;
    LACNIC) IRR="irr.lacnic.net";;
    LEVEL3) IRR="rr.level3.net";;
    NESTEGG) IRR="whois.nestegg.net";;
    NTTCOM) IRR="rr.ntt.net";;
    PANIX) IRR="rrdb.access.net";;
    RADB) IRR="whois.radb.net";;
    REACH) IRR="rr.telstraglobal.net";;
    RIPE) IRR="whois.ripe.net";;
    TC) IRR="whois.bgp.net.br";;
    *) echo "ERROR: Unknown source: $SOURCE" && exit 1;;
esac

# Initialize arrays to track visited objects
declare -A VISITED_AUT_NUMS
declare -A VISITED_AS_SETS
declare -A VISITED_PREFIX
declare -A VISITED_PFX_SRC

modify_as_chain() {
    local current_chain="$1"
    local member="$2"

    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: Modifying AS-SET chain for MEMBER: [$member]"
        echo "DEBUG: Current chain before modification: [$current_chain]"
    fi

    # Only append member if it's not already in the chain to avoid duplicates
    if [[ ! "$current_chain" =~ (^| )$member($| ) ]]; then
        current_chain="$current_chain $member"
    fi

    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: Modified chain: [$current_chain]"
    fi

    echo "$current_chain"
}

ASS_EXIST_COUNT=0
process_as_sets() {
    local AS_SET="$1"

    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: Processing AS-SET: [$AS_SET]"
    fi

    # Push the current AS-SET onto the stack
    AS_SET_STACK+=("$AS_SET")

    # check that the specified object actually exists
    SOURCES="AFRINIC ALTDB APNIC ARIN BELL BBOI CANARIE IDNIC JPIRR LACNIC LEVEL3 NESTEGG NTTCOM PANIX RADB REACH RIPE TC"
    for REG in $SOURCES; do
    case "$SOURCE" in
    	AFRINIC) IRR="whois.afrinic.net";;
    	ALTDB) IRR="whois.altdb.net";;
    	APNIC) IRR="whois.apnic.net";;
    	ARIN) IRR="rr.arin.net";;
    	BELL) IRR="whois.in.bell.ca";;
    	BBOI) IRR="irr.bboi.net";;
    	CANARIE) IRR="whois.canarie.ca";;
    	IDNIC) IRR="irr.idnic.net";;
    	JPIRR) IRR="jpirr.nic.ad.jp";;
    	LACNIC) IRR="irr.lacnic.net";;
    	LEVEL3) IRR="rr.level3.net";;
    	NESTEGG) IRR="whois.nestegg.net";;
    	NTTCOM) IRR="rr.ntt.net";;
    	PANIX) IRR="rrdb.access.net";;
    	RADB) IRR="whois.radb.net";;
    	REACH) IRR="rr.telstraglobal.net";;
    	RIPE) IRR="whois.ripe.net";;
    	TC) IRR="whois.bgp.net.br";;
    esac
	    if [ "$DEBUG" = "1" ]; then
		    echo "DEBUG: <process_as_sets()> Looking for "$AS_SET" with source: "$REG""
		    echo "DEBUG: <process_as_sets()> "$WHOIS" -h "$IRR" -s "$REG" "$AS_SET""
	    fi
            ASS_EXIST=$("$WHOIS" -h "$IRR" -s "$REG" "$AS_SET")
	    if [ "$DEBUG" = "1" ]; then
		    echo "DEBUG: <process_as_sets()> whois output for REG: ["$REG"] ASS_EXIST: ["$ASS_EXIST"]"
	    fi
            if [[ "$ASS_EXIST" = "%  No entries found for the selected source(s)." || \
		    "$ASS_EXIST" = "%% ERROR: One or more selected sources are unavailable." ]]; then
		    if [ "$DEBUG" = "1" ]; then
			    echo "DEBUG: <process_as_sets()> Object ["$AS_SET"] not found querying "$SOURCE" with source: "$REG""
			    echo "DEBUG: <process_as_sets()> ASS_EXISTS_COUNT: [$ASS_EXISTS_COUNT]"
		    fi
	    else
		    if [ "$DEBUG" = "1" ]; then
			    echo "DEBUG: <process_as_sets()> Object ["$AS_SET"] found querying "$SOURCE" with source: "$REG""
			    echo "DEBUG: <process_as_sets()> Incrementing ASS_EXISTS_COUNT"
		    fi
		    ((ASS_EXISTS_COUNT++))
		    if [ "$DEBUG" = "1" ]; then
			    echo "DEBUG: <process_as_sets()> ASS_EXISTS_COUNT: [$ASS_EXISTS_COUNT]"
		    fi
	    fi
    done
	    if [ "$ASS_EXISTS_COUNT" -gt 1 ]; then
		    echo "#####################################################################################################"
		    echo "#####################################################################################################"
		    echo "WARNING: Too much ass!"
		    echo "Object "$AS_SET" exists $ASS_EXISTS_COUNT times across multiple IRR registries."
		    echo "Unexpected behaviour will occur depending on source registry order of priority when building filters!"
		    echo "#####################################################################################################"
		    echo "#####################################################################################################"
	    fi
	    # reset the trip odometer on ASS_EXISTS_COUNT
	    if [ "$DEBUG" = "1" ]; then
		    echo "DEBUG: <process_as_sets()> exited processing loop for "$AS_SET""
		    echo "DEBUG: resetting ASS_EXISTS_COUNT to 0"
	    fi
	    ASS_EXISTS_COUNT=0

    # GetMembers
    if [ "$DEBUG" = "1" ]; then
            echo "DEBUG: <process_as_sets()#GetMembers> AS_SET: ["$AS_SET"]"
    fi
    ## aut-num 
    MEMBERS=$("$WHOIS" -h "$IRR" "$AS_SET" | get_member_autnums)
    if [ "$DEBUG" = "1" ]; then
	    echo "DEBUG: <process_as_sets()#aut-num>    |->aut-num MEMBERS: ["$MEMBERS"]"
    fi
    ## as-set
    MEMBERS_ASS=$("$WHOIS" -h "$IRR" "$AS_SET" | get_member_as_sets)
    if [ "$DEBUG" = "1" ]; then
        echo "DEBUG: <process_as_sets()#as-set>     |->as-set MEMBERS_ASS: ["$MEMBERS_ASS"]" 
    fi

   if [[ -z "$MEMBERS" && -z "$MEMBERS_ASS" ]]; then
        echo "ERROR: AS-SET [$AS_SET] either contains no members or was not found in any IRR source!"
	# bail out of this iternation of process_as_sets()
        return
    fi

    current_as_set_chain="${AS_SET_STACK[*]}"
    if [[ -z "$current_as_set_chain" ]]; then
        current_as_set_chain="$AS_SET"
    fi

    # Process aut-num members (AS numbers)
    while IFS= read -r MEMBER; do
        MEMBER=$(echo "$MEMBER" | tr -d '[:space:][:cntrl:]')

        if [[ -z "$MEMBER" ]]; then
            continue
        fi

        if [[ "$MEMBER" =~ ^AS- ]]; then
            # Recursively process nested AS-SETs
            current_as_set_chain=$(modify_as_chain "$current_as_set_chain" "$MEMBER")
            process_as_sets "$MEMBER"
        else
            # Process only if it's a valid aut-num and prefix
            if [ -z "${VISITED_AUT_NUMS[$MEMBER]}" ]; then
                VISITED_AUT_NUMS["$MEMBER"]=1

                if [ "$DEBUG" = "1" ]; then
                    echo "DEBUG: <process_autnum> IRR: ["$IRR"]"
                    echo "DEBUG: <process_autnum> Fetching routes from source [$SOURCE] where [origin: $MEMBER]"
                fi
		# Get origin: without SOURCE restriction so we can check for overlapping route objects
		# Also strip out RPKI sources we don't care about, at least not currently.
		IFS= IRR_OUT=($("$WHOIS" -h "$IRR" "\!g -i origin "$MEMBER"" | grep -e "^route:\|^source:" | awk '/^source:/ && /RPKI/ {skip=1; next} skip && /^route:/ {skip=0} /^route:/ {route=$0} /^source:/ && !skip && route != "" {print route; print $0; route=""}'))


		IFS=' ' PREFIXES=($(grep -e "^route:" <<< "$IRR_OUT" | awk '{print $2}' | uniq | tr '\n' ' '))
	
		if [ "$DEBUG" = "1" ]; then
			echo "DEBUG: IRR_OUT: ["$IRR_OUT"]"
		fi
		
		if [ ${#PREFIXES[@]} -eq 0 ]; then
                    if [ "$DEBUG" = "1" ]; then
                        echo "DEBUG: No prefix origins found for aut-num: ["$MEMBER"] in ["$SOURCE"]"
                    fi
		    echo -e "${current_as_set_chain} $MEMBER <--- WARNING: aut-num has no route objects with attribute [origin: "$MEMBER"] in source: ["$SOURCE"]"
                    continue
                fi

                # Print only complete chains and valid prefixes
                for PREFIX in "${PREFIXES[@]}"; do
                    if [ -n "$current_as_set_chain" ] && [ -n "$MEMBER" ] && [ -n "$PREFIX" ]; then
			if [ "$DEBUG" = "1" ]; then
				echo "DEBUG: PREFIXES array: ["${PREFIXES[@]}"]"
				echo "DEBUG: output loop - PREFIX: ["$PREFIX"] in MEMBER: [$MEMBER], increment counter"
				echo "DEBUG: determine the sources for route object for [$PREFIX]"
			fi

			# Get the sources for the current prefix and store them in an array
			IFS=' ' read -r -a ROUTE_SRC <<< $(echo -e "$IRR_OUT" | grep -A1 "$PREFIX" | awk '($1 == "source:") {print $2}' | tr '\n' ' ' | sed 's/ $//')

	    		if [ "$DEBUG" = "1" ]; then
				echo "DEBUG: ROUTE_SRC[@]: [${ROUTE_SRC[@]}]"
				echo "DEBUG: VISITED_PREFIX: ["$VISITED_PREFIX"]"
			fi

			# Check if ROUTE_SRC has already been processed
			for i in "${!ROUTE_SRC[@]}"; do
				KVP="${PREFIX} ${ROUTE_SRC["$i"]}"
				if [ "$DEBUG" = "1" ]; then
					echo "DEBUG: begin for i loop"
					echo "DEBUG: in for loop PREFIX: ["$PREFIX"] and KVP: ["$KVP"]"
					echo "DEBUG: in for loop {VISITED_PFX_SRC[KVP]}: ["${VISITED_PFX_SRC[$KVP]}"]"
					echo "DEBUG: in for loop {VISITED_PFX_SRC[@]}: ["${VISITED_PFX_SRC[@]}"]"
					echo "DEBUG: in for loop VISITED_PFX_SRC: ["$VISITED_PFX_SRC"]"
					echo "DEBUG: in for loop i: ["$i"]"
					echo "DEBUG: in for loop ROUTE_SRC: ["$ROUTE_SRC"]"
				fi
				if [ -z "${VISITED_PFX_SRC[$KVP]}" ]; then
					if [ "$i" -eq 0 ]; then
				 	# Output for the first source
					if [ "$DEBUG" = "1" ]; then
						echo "DEBUG: First route object + source KVP: ["$KVP"]"
					fi
					((irr_prefix_count++))  # Increment the prefix counter
					echo -e "${current_as_set_chain} $MEMBER route: $PREFIX ## source: [${ROUTE_SRC[0]}] \t[$irr_prefix_count]"
					VISITED_PFX_SRC["$PREFIX, ${ROUTE_SRC[$i]}"]=1
					if [ "$DEBUG" = "1" ]; then
                                                echo "DEBUG: end of for i loop for "[$PREFIX]" + ["$ROUTE_SRC"]"
					fi
				 else
					if [ "$DEBUG" = "1" ]; then
						echo "DEBUG: i not eq 0 else - Duplicate route object + source KVP: ["$KVP"]"
					fi
					echo -e "${current_as_set_chain} $MEMBER route: $PREFIX ## source: [${ROUTE_SRC[$i]}] \tWARNING: IRR data error - route: found in multiple registries!"
					VISITED_PFX_SRC["$PREFIX, ${ROUTE_SRC[$i]}"]=1
					if [ "$DEBUG" = "1" ]; then
                                                echo "DEBUG: end of for i loop for "[$PREFIX]" + ["$ROUTE_SRC"]"
                                        fi
					fi


				 fi
			 done
			 if [ "$DEBUG" = "1" ]; then
				 echo "DEBUG: for i in ROUTE_SRC loop ended"
			 fi
		    fi
	    done
            fi
        fi
    done <<< "$MEMBERS"

    # Process AS-SET members (AS-SET objects)
    while IFS= read -r MEMBER_ASS; do
        MEMBER_ASS=$(echo "$MEMBER_ASS" | tr -d '[:space:][:cntrl:]')

	# "don't want none unless you got buns, hun!" - Dan
        if [[ -z "$MEMBER_ASS" ]]; then
            continue
        fi

        if [ -n "${VISITED_AS_SETS[$MEMBER_ASS]}" ]; then
            echo "ERROR: Circular reference detected for AS-SET: "$MEMBER_ASS""
            continue
        fi

        VISITED_AS_SETS["$MEMBER_ASS"]=1

        # Recursively process nested AS-SETs
        current_as_set_chain=$(modify_as_chain "$current_as_set_chain" "$MEMBER_ASS")
        process_as_sets "$MEMBER_ASS"
    done <<< "$MEMBERS_ASS"

    # Pop the current AS-SET after processing
    if [ "${#AS_SET_STACK[@]}" -gt 0 ]; then
        unset 'AS_SET_STACK[${#AS_SET_STACK[@]}-1]'
    fi
}

# Start processing from the initial AS-SET
if [ "$DEBUG" = "1" ]; then
    echo "DEBUG: Starting with AS-SET: [$AS_SET]"
fi

# Process initial AS-SET and its aut-nums
irr_prefix_count=0
process_as_sets "$AS_SET"
if [ "$DEBUG" = "1" ]; then
	echo "DEBUG: end of iteration for processing initial as-set and aut-nums from AS_SET"
fi
echo "Total prefix count (IRR): $irr_prefix_count"
